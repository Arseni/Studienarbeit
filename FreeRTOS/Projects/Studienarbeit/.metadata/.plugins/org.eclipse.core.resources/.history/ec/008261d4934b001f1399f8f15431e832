
/* Library includes. */
#include "hw_types.h"
#include "gpio.h"
#include "hw_memmap.h"

/* drivers include */
#include "gpio.h"
#include "sysctl.h"

/* API include */
#include "buttons.h"

/* Presets */
#define BUTTON_MAX_CALLBACKS	10
#define BUTTON_PINS				(GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3)

/* ---------------------- private library --------------------- */
static tBoolean isInitialized = false;
static tButtonCallback callbackCollection[BUTTON_MAX_CALLBACKS];

static void Init(void)
{
	if(isInitialized)
		return;

	int i;
	for(i=0; i<BUTTON_MAX_CALLBACKS; i++)
		callbackCollection[i] = NULL;

	// enable PORTE clock
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOE);

	// set LED as output
	GPIODirModeSet(GPIO_PORTE_BASE, BUTTON_PINS, GPIO_DIR_MODE_IN);


	isInitialized = true;
}


/* ---------------------- public  library --------------------- */
tBoolean xButtonRegisterCallback(tButtonCallback btnCb)
{
	Init();

}

tButton xIsPressed(void)
{

}

